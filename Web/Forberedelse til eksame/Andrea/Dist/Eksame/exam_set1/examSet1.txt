13:29 22/04/2017

/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_

Index:

Exercise 1
1.1		 2 points
1.2		 3 points
1.3		 2 points
1.4		 3 points 		
				=> 10 points

Exercise 2
2.1		 2 points
2.2		 2 points
2.3		 3 points
				=> 7 points

Exercise 3
3.1		 5 points
3.2		 5 points
3.3		 3 points
				=> 13 points

Exercise 4
4.1.a		 5 points
4.1.b		 5 points
4.1.c		 5 points
4.2		 5 points
				=> 20 points


total = 50 points


Time 2 hours, use any helping material to solve them.

/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_


Exercise 1
==========

Look in the file book.html

There is a constructor function for the Book data-type.
In this program:
- A book has a title and a number of pages. 
- A book can provide its own description, with a toString method.

What you have to do:
1) Finish implementing the Book constructor, so that each Book object
   actually has the right attributes.
   To be sure that your job is done, when you are done the 
   assertions in the file, in section:
       // 1) testing the Book constructor
   should pass correctly, without errors.
   
2) Finish implementing the toString function, so that it
   returns a string describing the current book.
   For example, a book with title 'Abc' and 567 pages, will be described as:
      'Book "Abc" 567 pages'
   To be sure that your job is done, when you are done the 
   assertions in the file, in section:  
      // 2) testing the toString method
      
3) Now you should create 3 book objects, and place them into an array.
   To be sure that your job is done, when you are done the 
   assertions in the file, in section:  
      // 3) testing an array of books
      
4) Print the title for each book in the array. Use a for-loop.
   To be sure that your job is done, when you are done the 
   assertions in the file, in section:  
      // 4) print the titles of all books in the array.



Exercise 2
==========

Work with a responsive, flex-grid. In the code I'm using Respond.js.
The text in the example is taken from the book Postsingular by R. Rucker.


1) Change the HTML page so that the paragraph with title 'From Chpt 2: "Nant Day"' 
only occupies 2 columns, instead of 3 as it does now.

2) Change again the HTML page. Add a new DIV with a picture of the cover of the book.
The image should always occupy 1 column, at any resulution. 
Place the cover image to the left of the section with title 'Source'.
I provided the cover image in file: images/cover.jpg

3) 
In the css you can see that the breakpoints are:
320px , 480px , 600px , 768px , 1024px , 1280px , 1400px

In the CSS file you will see a comment like the following:

/*
FOLDING FLUID GRID

< 767px			- 1-Column Fluid Grid

768px - 1023px		- 2-Column Fluid Grid

> 1024px		- 3-Column Fluid Grid

Change widths as necessary
*/

Change the breakpoint, so that the 1-column is active only below 600px.



Exercise 3
==========

Look in the files:
- exercise03.html
- js/tripList.js

The tripList.js file define a TripList data-type, that represents a list of
things to bring to a trip.

In the HTLM file you can see that an object of TripList type is created, using
the constructor function.
In the HTML page the trip is called 'My fantastic trip to Kathmandu (Nepal)'.

In the HMTL page there is also a form, with text inputs and buttons.

1) Using jQuery, write an event handler for the click event of the 'addItem' button
so that when the button is clicked, the text in 'itemTextInput' is appended in the 'mainArea' DIV.
Then clear the text in 'itemTextInput', so the user can input something else.
NOTE: remember to add your items also to the TripList object, each time the 'addItem' button is clicked.

2) Modify the handler you just wrote for the 'addItem' button, so that it also 
writes the number of items currently in the list, in the last DIV of the page.

3) Using jQuery, write an event handler for the click event of the 'reset' button
so that when the button is clicked, all text in the 'mainArea' DIV is erased.
After your clicked the 'reset' button, the user can input a new item: 
the 'mainArea' will show only that last item, and the total number of items will be 1.




Exercise 4
==========

Look at the file: forestGenerator.html

You need to generate a description of a forest that has from 3 to 8 trees (use a random value to decide how many).
Each tree can have: 
- a broken branch -> 30% probability of having it
- and 0 to 6 leaves (use a random value to decide how many)

Each broken branck can have (or not, 50% probabilty):
- a leaf
         
Using jQuery:
1) Write a program that generates a random forest, using
   nested DIVs to represent 
	1.a) the trees, 
	1.b) broken branches, 
	1.c) and leaves.

2) When the user clicks the button, place the bird on the first tree in your forest 
   (inside the DIV representing a tree) with a broken branch.
   If in your current forest no trees have a broken brance, place the bird on the first tree.

Note: there is already a DIV with ID bird. 
      You need to remove it and place it at the appropriate place, when the button is clicked.